---
description: 
globs: frontend/**/*
alwaysApply: false
---
All frontend code is in the "<root>/frontend" directory, all e2e test code is in the "<root>/e2e" directory. Make sure all e2e tests and page objects go in "<root>/e2e". All frontend code should be in "<root>/frontend".

Whenever you are creating page objects, make sure to add the test id's to the frontend components as well.

# Frontend Tips
use bun for installs, all web installs are in the frontend directory
we are using material ui 7. Grids look like this:
```tsx
<Grid container spacing={2}>
  <Grid size={8}>
    <Item>size=8</Item>
  </Grid>
  <Grid size={4}>
    <Item>size=4</Item>
  </Grid>
  <Grid size={4}>
    <Item>size=4</Item>
  </Grid>
  <Grid size={8}>
    <Item>size=8</Item>
  </Grid>
</Grid>
```
use the size, not xs or any other props.

To adjust sizes per screen size:
```tsx
  <Grid size={{
  xs: 8
  md: 12
  // etc...
  }}>
    <Item>size=8</Item>
  </Grid>
```


All tabs components should sync their selected tab component to the url, using a `?tab-<unique-identifier>=<selected tab>` query selector. When the tab changes the url should reflect that, and that value should be the default selction for the tab. However, we do not want to try to sync the url bar changes down to the tab, as that makes the logic to difficult. This is just so people can link to a tab, and so a refresh works. We don't expect anyone to edit to url bar manually.




# End-to-End Testing Documentation

## Overview
This document outlines the best practices for implementing end-to-end tests using Playwright with TypeScript, focusing on page objects and test IDs.


Don't use mocks at all. We will setup our actual api running locally to test the whole system in a true e2e manner

## Test ID Naming Convention

### Component Test IDs
For components in `<root>/frontend/src/components`, use the following format:
```tsx
data-testid="component-name-element-purpose"
```

Examples:
- `data-testid="nav-menu-button"`
- `data-testid="user-profile-avatar"`
- `data-testid="search-input-field"`

### Page Test IDs
For pages in `<root>/frontend/src/pages`, use the following format:
```tsx
data-testid="page-name-section-element"
```

Examples:
- `data-testid="home-hero-title"`
- `data-testid="profile-settings-form"`
- `data-testid="dashboard-stats-card"`

## Adding Test IDs to Components
All components should have test id's. So that we can make page objects
### Component Example
```tsx
// frontend/src/components/Button.tsx
interface ButtonProps {
  label: string;
  onClick: () => void;
}

export const Button = ({ label, onClick }: ButtonProps) => {
  return (
    <button
      data-testid={`button-${label.toLowerCase().replace(/\s+/g, '-')}`}
      onClick={onClick}
    >
      {label}
    </button>
  );
};
```

### Page Example
```tsx
// frontend/src/pages/Home.tsx
export const Home = () => {
  return (
    <div data-testid="home-page">
      <h1 data-testid="home-title">Welcome</h1>
      <section data-testid="home-features">
        {/* Feature content */}
      </section>
    </div>
  );
};
```


